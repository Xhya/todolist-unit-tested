{
	// Place your espace de travail todolist-unit-test-architecture snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"previousState": {
		"scope": "typescript",
		"prefix": "previousState",
		"body": [
		  "const previousState: Todo = {",
		  " 0: { text: 'Run the tests', completed: true, id: 0 },",
		  "};"
		]
	  },

	"todo object": {
		"scope": "typescript",
		"prefix": "todo object",
		"body": ["{ 0: { text: 'Use Redux', completed: false, id: 0 } }"]
	  },
	
	  "todo array": {
		"scope": "typescript",
		"prefix": "todo array",
		"body": ["[{ text: 'Use Redux', completed: false, id: 0 }]"]
	  },
	

	"todo type": {
		"scope": "typescript",
		"prefix": "todo type",
		"body": ["{ [id: string]: TodoItem }"]
	  },
	
	  "fake todo": {
		"scope": "typescriptreact",
		"prefix": "fake todo",
		"body": [
		  "const fakeTodo = [{id: 0,text: 'Salade',completed: false,  } as TodoItem,];"
		]
	  },

	"webservice call": {
		"scope": "typescriptreact",
		"prefix": "webservice call",
		"body": ["const todos = await webservice.getList();"]
	  },
	
	  "webservice type": {
		"scope": "typescriptreact",
		"prefix": "webservice type",
		"body": ["{ webservice }: { webservice: TodolistWebserviceInterface }"]
	  },

	"testing final": {
		"scope": "typescript",
		"prefix": "testing final",
		"body": [
		  "import reducer, { todoAdded, Todo } from './todolist.reducer';",
		  "import { TodolistWebserviceInterface } from '../infra/todolist.webservice.interface';",
		  "import { TodolistWebserviceMock } from '../infra/todolist.webservice.mock';",
		  "import TodoViewModel from '../ui/todolist.viewmodel';",
		  "import { ReduxStore, RootState, createStore } from './store.config';",
		  "import { addItem, refreshTodolist } from './todolist.dispatcher';",
		  "",
		  "describe('todolist tests', () => {",
		  " let store: ReduxStore;",
		  " let webservice: TodolistWebserviceInterface;",
		  " let initialState: RootState;",
		  "",
		  " beforeEach(() => {",
		  "    webservice = new TodolistWebserviceMock();",
		  "   store = createStore({ todolistWebservice: webservice });",
		  "   initialState = store.getState();",
		  " });",
		  "",
		  "it('should get todolist', async () => {",
		  "   await store.dispatch(refreshTodolist(webservice));",
		  "   expect(getItemValueList()).toEqual(['Salade']);",
		  " });",
		  "",
		  " it('should add item', async () => {",
		  "   await store.dispatch(refreshTodolist(webservice));",
		  "   await store.dispatch(addItem('Tomate'));",
		  "   expect(getItemValueList()).toEqual(['Salade', 'Tomate']);",
		  "   await store.dispatch(addItem('Oignon'));",
		  "   expect(getItemValueList()).toEqual(['Salade', 'Tomate', 'Oignon']);",
		  " });",
		  "",
		  " const getItemValueList = () => Object.values(TodoViewModel.list(store.getState())).map((item) => item.text);",
		  "});",
		]
	  }

	  "list object": {
		"scope": "typescript",
		"prefix": "list object",
		"body": [
		  "private _list = {",
		  "0: {",
		  "id: 0,",
		  "text: 'Salade',",
		  "completed: false,",
		  "},",
		  "};"
		]
	  },
}